<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SortAlgGame</name>
    </assembly>
    <members>
        <member name="T:SortAlgGame.ViewModel.NotifyChangeBase">
            <summary>
            Die Klasse NotifyChangeBase Implementiert das Interface INotifyPropertyChanged und stellt eine Methode 
            zur Verfuegung um ein PropertyChanged Event auszuloesen. 
            </summary>
        </member>
        <member name="M:SortAlgGame.ViewModel.NotifyChangeBase.NotifyPropertyChanged(System.String)">
            <summary>
            Die Methode ermoeglicht das Erstellen eines neuen PropertyChanged Events.
            </summary>
            <param name="property">Name der aktualisierten Variable.</param>
        </member>
        <member name="E:SortAlgGame.ViewModel.NotifyChangeBase.PropertyChanged">
            <summary>
            Event Handler zur Benachrichtigung ueber Aenderungen von Variablen.
            </summary>
        </member>
        <member name="T:SortAlgGame.Model.Statements.ListStm">
            <summary>
            Diese Klasse ListStm repraesentiert die If-, For- und While-Bausteine.
            </summary>
        </member>
        <member name="T:SortAlgGame.Model.Statements.Statement">
            <summary>
            Die Klasse Statement repraesentiert alle Bausteine, die keine in sich geschachtelten Bausteine enthalten 
            (z.B. einfache Variablenzuweisung).
            </summary>
        </member>
        <member name="F:SortAlgGame.Model.Statements.Statement.indent">
            <summary>
            Einrueckung des Bausteintexts.
            </summary>
        </member>
        <member name="F:SortAlgGame.Model.Statements.Statement.content">
            <summary>
            Bausteintext.
            </summary>
        </member>
        <member name="F:SortAlgGame.Model.Statements.Statement.programm">
            <summary>
            Programm Objekt, zu dem der Baustein gehoert.
            </summary>
        </member>
        <member name="F:SortAlgGame.Model.Statements.Statement.parent">
            <summary>
            Baustein, in dem sich dieser Baustein befindet.
            </summary>
        </member>
        <member name="F:SortAlgGame.Model.Statements.Statement.brick">
            <summary>
            Enumerator zum Bestimmen der Bausteinart.
            </summary>
        </member>
        <!-- Ungültiger XML-Kommentar wurde für den Member "M:SortAlgGame.Model.Statements.Statement.#ctor(SortAlgGame.Model.Programm,SortAlgGame.Model.Statements.ListStm,SortAlgGame.Config.EXECUTE)" ignoriert -->
        <member name="M:SortAlgGame.Model.Statements.Statement.updateLog">
            <summary>
            Erstellt aus dem aktuellen DataSet Objekt der Speicherverwaltung einen neuen Logeintrag.
            </summary>
        </member>
        <member name="M:SortAlgGame.Model.Statements.Statement.switchContent(SortAlgGame.Config.EXECUTE)">
            <summary>
            Bestimmt den Bausteintext.
            </summary>
            <param name="brick">Bausteinart.</param>
            <returns>Bausteintext.</returns>
        </member>
        <member name="M:SortAlgGame.Model.Statements.Statement.execute(System.Boolean)">
            <summary>
            Führt den zur Bausteinart passenden Programmcode aus.
            </summary>
            <param name="buildLog">Bestimmt, ob ein Log angelegt werden soll.</param>
            <returns>Aufgetretener Fehler. Null, wenn kein Fehler gefunden wurde.</returns>
        </member>
        <member name="P:SortAlgGame.Model.Statements.Statement.Indent">
            <summary>
            indent Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.Model.Statements.Statement.Content">
            <summary>
            content Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.Model.Statements.Statement.Parent">
            <summary>
            parrent Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.Model.Statements.Statement.Programm">
            <summary>
            programm Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.Model.Statements.Statement.Brick">
            <summary>
            brick Accessor
            </summary>
        </member>
        <member name="F:SortAlgGame.Model.Statements.ListStm.stmList">
            <summary>
            Liste der im Block enthaltenen Bausteine
            </summary>
        </member>
        <member name="M:SortAlgGame.Model.Statements.ListStm.#ctor(SortAlgGame.Model.Programm,SortAlgGame.Model.Statements.ListStm,SortAlgGame.Config.EXECUTE)">
            <summary>
            Konstruktor. Ruft zusaetzlich den Konstruktor der Klasse Statement auf.
            </summary>
            <param name="programm">Die Programm Klasse, zu dem der Baustein gehoert.</param>
            <param name="parent">Der Baustein, in dem sich dieser Baustein befindet.</param>
            <param name="brick">Art des Bausteins.</param>
        </member>
        <member name="M:SortAlgGame.Model.Statements.ListStm.executeList(System.Boolean)">
            <summary>
            Ruft die execute Methode fuer alle in diesem Baustein enthaltenen Statements auf.
            </summary>
            <param name="buildLog">Legt fest oft ein Log erstellt werden soll.</param>
            <returns>Aufgetretene Fehlermeldung. Null wenn kein Fehler festgestellt wurde.</returns>
        </member>
        <member name="M:SortAlgGame.Model.Statements.ListStm.addBeforeStm(SortAlgGame.Model.Statements.Statement,SortAlgGame.Model.Statements.Statement)">
            <summary>
            Fuegt einen neuen Baustein an der uebergebenen Position ein.
            </summary>
            <param name="pos">Position des neuen Bausteins.</param>
            <param name="stm">Einzufuegender Baustein.</param>
        </member>
        <member name="M:SortAlgGame.Model.Statements.ListStm.removeStm(SortAlgGame.Model.Statements.Statement)">
            <summary>
            Entfernt den uebergebenen Baustein aus der stmList.
            </summary>
            <param name="stm">Zu entfernender Baustein.</param>
        </member>
        <member name="M:SortAlgGame.Model.Statements.ListStm.stmListContains(SortAlgGame.Model.Statements.Statement,SortAlgGame.Model.Statements.ListStm)">
            <summary>
            Prueft ob sich der uebergebene Baustein in der stmList befindet.
            </summary>
            <param name="stm">Gesuchter Baustein.</param>
            <param name="listStm">Zu durchsuchende Liste.</param>
            <returns>True, wenn der Baustein gefunden wurde. False, wenn nicht.</returns>
        </member>
        <member name="M:SortAlgGame.Model.Statements.ListStm.updateDataSets">
            <summary>
            Aktualisiert die Speicherverwaltung des Algorithmus.
            </summary>
        </member>
        <member name="M:SortAlgGame.Model.Statements.ListStm.switchContent(SortAlgGame.Config.EXECUTE)">
            <summary>
            Bestimmt den anzuzeigenden Text des Bausteins
            </summary>
            <param name="brick">Art des Bausteins</param>
            <returns>Bausteintext.</returns>
        </member>
        <member name="M:SortAlgGame.Model.Statements.ListStm.execute(System.Boolean)">
            <summary>
            Sorgt für das Ausfuehren des zum Baustein gehoerenden Programmcodes.
            </summary>
            <param name="buildLog">Bestimmt, ob ein Log angelegt werden soll.</param>
            <returns>Aufgetretener Fehler. Null, wenn kein Fehler gefunden wurde.</returns>
        </member>
        <member name="M:SortAlgGame.Model.Statements.ListStm.switchOnFor(SortAlgGame.Model.DataSet,System.Boolean)">
            <summary>
            Bestimmt den Programmcode einer For-Schleife.
            </summary>
            <param name="actDataSet">Aktuelle Speicherbelegung in der Speicheverwaltung des Algorithmus.</param>
            <param name="buildLog">Bestimmt, ob ein Log angelegt werden soll.</param>
            <returns>Aufgetretener Fehler. Null, wenn kein Fehler gefunden wurde.</returns>
        </member>
        <member name="M:SortAlgGame.Model.Statements.ListStm.runChildStatements(SortAlgGame.Model.DataSet,System.Boolean)">
            <summary>
            Bestimmt die aktuelle Laufzeit und ruft die Methode zum Ausfuehren aller, in stmList enthaltenen Bausteine auf.
            </summary>
            <param name="actDataSet">Aktuelle Speicherbelegung in der Speicheverwaltung des Algorithmus.</param>
            <param name="buildLog">Bestimmt, ob ein Log angelegt werden soll.</param>
            <returns>Aufgetretener Fehler. Null, wenn kein Fehler gefunden wurde.</returns>
        </member>
        <member name="M:SortAlgGame.Model.Statements.ListStm.switchOnIf(SortAlgGame.Model.DataSet,System.Boolean)">
            <summary>
            Bestimmt den Programmcode einer If-Bedingung.
            </summary>
            <param name="actDataSet">Aktuelle Speicherbelegung in der Speicheverwaltung des Algorithmus.</param>
            <param name="buildLog">Bestimmt, ob ein Log angelegt werden soll.</param>
            <returns>Aufgetretener Fehler. Null, wenn kein Fehler gefunden wurde.</returns>
        </member>
        <member name="M:SortAlgGame.Model.Statements.ListStm.switchOnWhile(SortAlgGame.Model.DataSet,System.Boolean)">
            <summary>
            Bestimmt den Programmcode einer While-Schleife.
            </summary>
            <param name="actDataSet">Aktuelle Speicherbelegung in der Speicheverwaltung des Algorithmus.</param>
            <param name="buildLog">Bestimmt, ob ein Log angelegt werden soll.</param>
            <returns>Aufgetretener Fehler. Null, wenn kein Fehler gefunden wurde.</returns>
        </member>
        <member name="P:SortAlgGame.Model.Statements.ListStm.StmList">
            <summary>
            stmList Accessor.
            </summary>
        </member>
        <member name="P:SortAlgGame.Model.Statements.ListStm.Indent">
            <summary>
            indent Accessor. Ueberschreibt den indent Accessor der Klasse Statement. Bestimmt die Einrueckung des Bausteins
            </summary>
        </member>
        <member name="T:SortAlgGame.Model.Programm">
            <summary>
            Die Klasse Programm repraesentiert den aus Bausteinen bestehenden Algorithmus und dessen Speicherverwaltung.
            </summary>
        </member>
        <member name="F:SortAlgGame.Model.Programm._actStats">
            <summary>
            3-Tuple, welches die aktuellen Daten, des auf einen Testfall angewandten Algorihmus enthaelt: Laenge der zu sortierenden 
            Zahlenfolge, Fehlerbericht, Laufzeit.
            </summary>
        </member>
        <member name="F:SortAlgGame.Model.Programm._actRuntime">
            <summary>
            Enthaelt die Laufzeit des Algorithmus, die beim letzten Testfall ermittelt wurde.
            </summary>
        </member>
        <member name="F:SortAlgGame.Model.Programm._log">
            <summary>
            Stellt den Log des Algorithmus dar. In ihm sind alle Datenbewegungen bzw. Variablenveraenderungen die in der 
            Speicherverwaltung des Algorithmus stattgefunden haben vermerkt. 
            </summary>
        </member>
        <member name="F:SortAlgGame.Model.Programm._stack">
            <summary>
            Stellt die Speicherverwaltung des Algorithmus in Form eines Stacks dar.
            </summary>
        </member>
        <member name="F:SortAlgGame.Model.Programm._stm">
            <summary>
            Referenz auf den Startbaustein des Algorithmus.
            </summary>
        </member>
        <member name="M:SortAlgGame.Model.Programm.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:SortAlgGame.Model.Programm.execute(System.Int32[],System.Boolean)">
            <summary>
            Ruft die execute Methode des _stm auf und legt nach dessen Ausfaehrung die _actStats des Algorithmus fest.
            </summary>
            <param name="a">Zu sortierende Zahlenfolge.</param>
            <param name="genLog">Bestimmt ob ein Log angelegt werden soll.</param>
        </member>
        <member name="M:SortAlgGame.Model.Programm.getActualStmNesting">
            <summary>
            Erstellt aus der rekursiven Schachtelung der Statement und ListStm Klassen eine Listenstruktur. Erwartet keinen Uebergabeparamter.
            </summary>
            <returns>Algorithmus Bausteine in Listenstruktur.</returns>
        </member>
        <member name="M:SortAlgGame.Model.Programm.getActualStmNesting(SortAlgGame.Model.Statements.ListStm)">
            <summary>
            Erstellt aus der rekursiven Schachtelung der Statement und ListStm Klassen eine Listenstruktur.
            </summary>
            <param name="baseStm">Referenz auf ein ListStm.</param>
            <returns>Algorithmus Bausteine in Form einer Liste.</returns>
        </member>
        <member name="M:SortAlgGame.Model.Programm.concatList(System.Collections.Generic.LinkedList{SortAlgGame.Model.Statements.Statement},System.Collections.Generic.LinkedList{SortAlgGame.Model.Statements.Statement})">
            <summary>
            Konkateniert zwei Listen die Statements beinhalten.
            </summary>
            <param name="first">Liste 1</param>
            <param name="second">Liste 2</param>
            <returns>Konkatenation der beiden uebergebenen Listen.</returns>
        </member>
        <member name="M:SortAlgGame.Model.Programm.buildBubblesort">
            <summary>
            Erstellt die Statement und ListStm Schachtelung, die den Algorithmus Bubblesort repraesentiert.
            </summary>
        </member>
        <member name="M:SortAlgGame.Model.Programm.buildQuicksort">
            <summary>
            Erstellt die Statement und ListStm Schachtelung, die den Algorithmus Quicksort repraesentiert.
            </summary>
        </member>
        <member name="M:SortAlgGame.Model.Programm.buildSelectionsort">
            <summary>
            Erstellt die Statement und ListStm Schachtelung, die den Algorithmus Selectionsort repraesentiert.
            </summary>
        </member>
        <member name="M:SortAlgGame.Model.Programm.buildInsertionsort">
            <summary>
            Erstellt die Statement und ListStm Schachtelung, die den Algorithmus Insertionsort repraesentiert.
            </summary>
        </member>
        <member name="P:SortAlgGame.Model.Programm.ProgrammStats">
            <summary>
            _actStats Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.Model.Programm.Stack">
            <summary>
            _stack Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.Model.Programm.Stm">
            <summary>
            _stm Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.Model.Programm.Log">
            <summary>
            _log Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.Model.Programm.ActRuntime">
            <summary>
            _actRuntime Accessor
            </summary>
        </member>
        <member name="T:SortAlgGame.ViewModel.ResultVM">
            <summary>
            Die Klasse ResultVM stellt die Daten fuer die Auswertung des Spiels zur Verfuegung. Sie erbt von der Klasse 
            NotifyChangeBase, um der GUI Aenderungen mitteilen zu koennen.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.ResultVM._game">
            <summary>
            Referenz auf das Spiel, das ausgewertet werden soll.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.ResultVM._p1StatCol">
            <summary>
            Daten der Punktetabelle des Spieler 1: Laenge der angewandten Zahlenfolge, Fehlerbericht, Laufzeit, Sortierung, Punkte.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.ResultVM._p2StatCol">
            <summary>
            Daten der Punktetabelle des Spieler 2: Laenge der angewandten Zahlenfolge, Fehlerbericht, Laufzeit, Sortierung, Punkte.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.ResultVM._p1TargetItems">
            <summary>
            Der vom Spieler 1 zusammengebaute Algorithmus in Form einer Auflistung.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.ResultVM._p2TargetItems">
            <summary>
            Der vom Spieler 1 zusammengebaute Algorithmus in Form einer Auflistung.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.ResultVM._p1Status">
            <summary>
            Text, ob der Spieler 1 Gewonnen hat.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.ResultVM._p2Status">
            <summary>
            Text, ob der Spieler 2 Gewonnen hat.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.ResultVM._p1Points">
            <summary>
            Gesamtpunktzahl des Spieler 1.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.ResultVM._p2Points">
            <summary>
            Gesamtpunktzahl des Spieler 1.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.ResultVM._p1Time">
            <summary>
            Die vom Spieler 1 benoetigte Zeit.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.ResultVM._p2Time">
            <summary>
            Die vom Spieler 1 benoetigte Zeit.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.ResultVM._p1Animation">
            <summary>
            Referenz auf das AnimationVM Objekt, was die Daten fuer die Animation des Spieler 1 beinhaltet.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.ResultVM._p2Animation">
            <summary>
            Referenz auf das AnimationVM Objekt, was die Daten fuer die Animation des Spieler 1 beinhaltet.
            </summary>
        </member>
        <member name="M:SortAlgGame.ViewModel.ResultVM.#ctor(SortAlgGame.ViewModel.GameVM)">
            <summary>
            Konstruktor
            </summary>
            <param name="gameVM">Referenz auf das auszuwertende Spiel</param>
        </member>
        <member name="P:SortAlgGame.ViewModel.ResultVM.P1StatCol">
            <summary>
            _p1StatCol Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.ResultVM.P2StatCol">
            <summary>
            _p2StatCol Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.ResultVM.P1TargetItems">
            <summary>
            _p1TargetItems Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.ResultVM.P2TargetItems">
            <summary>
            _p2TargetItems Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.ResultVM.P1Status">
            <summary>
            _p1Status Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.ResultVM.P2Status">
            <summary>
            _p2Status Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.ResultVM.P1Points">
            <summary>
            _p1Points Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.ResultVM.P2Points">
            <summary>
            _p2Points Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.ResultVM.P1Animation">
            <summary>
            _p1Animation Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.ResultVM.P2Animation">
            <summary>
            _p2Animation Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.ResultVM.P1Time">
            <summary>
            _p1Time Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.ResultVM.P2Time">
            <summary>
            _p2Time Accessor
            </summary>
        </member>
        <member name="T:SortAlgGame.Model.DataSet">
            <summary>
            Die Klasse DataSet ist ein Teil der Speicherverwaltung des Algorithmus. In ihr befinden sich alle vom Algorithmus benoetigten Variablen.
            </summary>
        </member>
        <member name="M:SortAlgGame.Model.DataSet.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:SortAlgGame.Model.DataSet.#ctor(System.Int32[])">
            <summary>
            Konstruktor mit Array Uebergabe. Dabei wird eine echte Kopie des uebergebenen Array erstellt.
            </summary>
            <param name="array">Zahlenfolge</param>
        </member>
        <member name="M:SortAlgGame.Model.DataSet.#ctor(SortAlgGame.Model.DataSet)">
            <summary>
            Konstruktor mit DataSet Objekt als Uebergabe. Dabei wird eine echte Kopie des Array a erstellt.
            </summary>
            <param name="dataSet">Zu kopierendes DataSet Objekt.</param>
        </member>
        <member name="P:SortAlgGame.Model.DataSet.I">
            <summary>
            i Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.Model.DataSet.J">
            <summary>
            j Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.Model.DataSet.N">
            <summary>
            n Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.Model.DataSet.A">
            <summary>
            Array a Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.Model.DataSet.Min">
            <summary>
            min Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.Model.DataSet.Pivot">
            <summary>
            pivot Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.Model.DataSet.Left">
            <summary>
            left Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.Model.DataSet.Right">
            <summary>
            right Accessor
            </summary>
        </member>
        <member name="T:SortAlgGame.ViewModel.Command">
            <summary>
            Ermoeglicht eine einfache Erstellung der Commands
            Basierend auf [Micd] Microsoft Corporation, Patterns - WPF Apps With The Model-View-ViewModel Design Pattern, https://msdn.microsoft.com/en-us/magazine/dd419663.aspx#id0090030 
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.Command.execute">
            <summary>
            Auszufuehrende Aktion.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.Command.canExecute">
            <summary>
            Praedikat zum pruefen, ob die Ausfuehrung moeglich ist.
            </summary>
        </member>
        <member name="M:SortAlgGame.ViewModel.Command.#ctor(System.Action{System.Object})">
            <summary>
            Konstruktor
            </summary>
            <param name="execute">Auszufuehrende Aktion</param>
        </member>
        <member name="M:SortAlgGame.ViewModel.Command.#ctor(System.Action{System.Object},System.Predicate{System.Object})">
            <summary>
            Konstruktor mit Praedikat
            </summary>
            <param name="execute">Auszufuehrende Aktion</param>
            <param name="canExecute">Praedikat. Bestimmt ob die Aktion ausgefuehrt werden kann.</param>
        </member>
        <member name="M:SortAlgGame.ViewModel.Command.CanExecute(System.Object)">
            <summary>
            Bestimmt ob die Aktion des Commands ausgefuehrt werden kann/darf.
            </summary>
            <param name="parameter">Vom Command genutzte Parameter.</param>
            <returns>True, wenn die Ausfuehrung des Commands moeglich ist. False, wenn nicht.</returns>
        </member>
        <member name="M:SortAlgGame.ViewModel.Command.Execute(System.Object)">
            <summary>
            Die Methode wird immer dann ausgefuehrt, wenn das Command aufgerufen wird.
            </summary>
            <param name="parameter">Die vom Command benutzen Parameter.</param>
        </member>
        <member name="E:SortAlgGame.ViewModel.Command.CanExecuteChanged">
            <summary>
            Event das immer ausgeloest wird, wenn eine Aenderung stattfindet, die die Ausfuehrbarkeit des Commands beeinflusst.
            </summary>
        </member>
        <member name="T:SortAlgGame.ViewModel.HauptmenueVM">
            <summary>
            Klasse zum Darstellen des Hauptmenues.
            </summary>
        </member>
        <member name="T:SortAlgGame.ViewModel.ErklaerungVM">
            <summary>
            Stellt die Daten fuer die Algorithmus Erklaerungen zur Verfuegung. Sie erbt von der Klasse NotifyChangeBase, um der GUI 
            Aenderungen mitteilen zu koennen.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.ErklaerungVM._animationVM">
            <summary>
            Referenz auf ein AnimationVM Objekt, ueber welches die Daten fuer die Animation bereitgestellt werden.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.ErklaerungVM._arrayGen">
            <summary>
            Referenz auf ein ArrayGen Objekt zum erzeugen von Zahlenfolgen.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.ErklaerungVM._testArray">
            <summary>
            Die auf den Algorithmus anzuwendene Zahlenfolge.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.ErklaerungVM._infoText">
            <summary>
            Informationstext des Algorithmus.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.ErklaerungVM._sortName">
            <summary>
            Algorithmus Bezeichnung.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.ErklaerungVM._programm">
            <summary>
            Der Algorithmus und seine Speicherverwaltung.
            </summary>
        </member>
        <member name="M:SortAlgGame.ViewModel.ErklaerungVM.#ctor(System.String)">
            <summary>
            Konstruktor
            </summary>
            <param name="sortAlg">Der anzuzeigende Algorithmus</param>
        </member>
        <member name="M:SortAlgGame.ViewModel.ErklaerungVM.switchOnAlg(System.String)">
            <summary>
            Bestimmt die anzuzeigenden Daten, die Algorithmus spezifisch sind: Infotext, Algorithmus Bezeichnung, Algorithmus im Objekt _programm.
            </summary>
            <param name="sortAlg">Algorithmus Bezeichnung</param>
        </member>
        <member name="M:SortAlgGame.ViewModel.ErklaerungVM.runAnimation">
            <summary>
            Initialisiert die Animation der Erklaerung.
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.ErklaerungVM.SortName">
            <summary>
            _sortName Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.ErklaerungVM.AnimationVM">
            <summary>
            _animationVM Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.ErklaerungVM.InfoText">
            <summary>
            _infoText Accessor
            </summary>
        </member>
        <member name="T:SortAlgGame.ViewModel.AnimationVM">
            <summary>
            Die Klasse AnimationVM stellt die Daten fuer die Animation zur Verfuegung. Sie erbt von der Klasse NotifyChangeBase, um der GUI
            Aenderungen mitteilen zu koennen.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.AnimationVM._animationData">
            <summary>
            Daten fuer das Balkendiagramm (3-Tuple): Rechteckhoehe, Zahlenwert des Feldes im Array, Liste von Pointern die auf dieses Feld 
            zeigen.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.AnimationVM._dataSetValues">
            <summary>
            Vom Algorithmus benutze Variablen und deren Belegung. 
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.AnimationVM._stms">
            <summary>
            Auflistung der Bausteine und des Bausteinstexts.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.AnimationVM._programm">
            <summary>
            Referenz auf das Programm, was in der Animation dargestellt werden soll.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.AnimationVM._curLogSet">
            <summary>
            Aktuelle Position im Log des Programms.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.AnimationVM._timer">
            <summary>
            Timer um die Animation automatisch zu durchlaufen.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.AnimationVM._maxAnimationHeight">
            <summary>
            Maximale Hoehe der Animation.
            </summary>
        </member>
        <member name="M:SortAlgGame.ViewModel.AnimationVM.#ctor(SortAlgGame.Model.Programm)">
            <summary>
            Konstruktor
            </summary>
            <param name="prg">Programm, dass die Animation darstellen soll.</param>
        </member>
        <member name="M:SortAlgGame.ViewModel.AnimationVM.logForward(System.Boolean)">
            <summary>
            Laed den naechsten Schritt des Sortierablaufs.
            </summary>
            <param name="autom"></param>
        </member>
        <member name="M:SortAlgGame.ViewModel.AnimationVM.logBackwards">
            <summary>
            Laed den vorherigen Schritt des Sortierablaufs.
            </summary>
        </member>
        <member name="M:SortAlgGame.ViewModel.AnimationVM.logPlay">
            <summary>
            Startet den automatisierten Ablauf der Animation.
            </summary>
        </member>
        <member name="M:SortAlgGame.ViewModel.AnimationVM.logStop">
            <summary>
            Stoppt den automatisierten Ablauf der Animation
            </summary>
        </member>
        <member name="M:SortAlgGame.ViewModel.AnimationVM.animationEvent(System.Object,System.EventArgs)">
            <summary>
            Wird durch den _timer ausgeloest. Laed den naechsten Schritt der Animation.
            </summary>
            <param name="sender">Ausloeser des Events</param>
            <param name="e">Event</param>
        </member>
        <member name="M:SortAlgGame.ViewModel.AnimationVM.updateAnimationData">
            <summary>
            Fuehrt die Aktualisierung der Animationsdaten durch.
            </summary>
        </member>
        <member name="M:SortAlgGame.ViewModel.AnimationVM.initStms">
            <summary>
            Initialisiert den Pseudocode
            </summary>
        </member>
        <member name="M:SortAlgGame.ViewModel.AnimationVM.updateFontStyle(SortAlgGame.Model.Statements.Statement)">
            <summary>
            Aktualisiert die Schriftfarbe des Pseudocodes.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:SortAlgGame.ViewModel.AnimationVM.update">
            <summary>
            Methode zum gebuendelten Aufrufen der Updatemethoden.
            </summary>
        </member>
        <member name="M:SortAlgGame.ViewModel.AnimationVM.updateDataSetValues">
            <summary>
            Aktualisiert die ObservableCollection _dataSetValues.
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.AnimationVM.animationForward">
            <summary>
            Befehl zum Vorspulen der Animation.
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.AnimationVM.animationBackward">
            <summary>
            Befehl zum Zurueckspulen der Animation
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.AnimationVM.animationStart">
            <summary>
            Befehl zum Starten der Animation
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.AnimationVM.animationStop">
            <summary>
            Befehl zum Stoppen der Animation
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.AnimationVM.MaxAnimationHeight">
            <summary>
            _maxAnimationHeight Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.AnimationVM.DataSetValues">
            <summary>
            _dataSetValues Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.AnimationVM.AnimationData">
            <summary>
            _animationData Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.AnimationVM.Stms">
            <summary>
            _stms Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.AnimationVM.Programm">
            <summary>
            _programm Accessor
            </summary>
        </member>
        <member name="T:SortAlgGame.Views.HauptmenueV">
            <summary>
            Interaktionslogik für HauptmenueV.xaml
            </summary>
            <summary>
            HauptmenueV
            </summary>
        </member>
        <member name="M:SortAlgGame.Views.HauptmenueV.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SortAlgGame.Views.ErklaerungV">
            <summary>
            Interaktionslogik für ErklaerungV.xaml
            </summary>
            <summary>
            ErklaerungV
            </summary>
        </member>
        <member name="M:SortAlgGame.Views.ErklaerungV.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SortAlgGame.Model.ArrayGen">
            <summary>
            Dient zur Erstellung von zufaellig belegten Zahlenfolgen.
            </summary>
        </member>
        <member name="F:SortAlgGame.Model.ArrayGen._rnd">
            <summary>
            Random Objekt zum bestimmen der Zahlen 
            </summary>
        </member>
        <member name="M:SortAlgGame.Model.ArrayGen.#ctor">
            <summary>
            Konstruktor
            </summary>
        </member>
        <member name="M:SortAlgGame.Model.ArrayGen.getTestArrays">
            <summary>
            Erstellt vier zufaellig belegte Zahlenfolgen.
            </summary>
            <returns>Zweidimensionales Array, welches die generierten Zahlenfolgen enthaelt.</returns>
        </member>
        <member name="M:SortAlgGame.Model.ArrayGen.getRndArray(System.Int32)">
            <summary>
            Erstellt eine zufaellige Folge von Zahlen.
            </summary>
            <param name="length">Laenge der Zahlenfolge.</param>
            <returns>Generierte Zahlenfolge.</returns>
        </member>
        <member name="T:SortAlgGame.App">
            <summary>
            Interaction logic for App.xaml
            </summary>
            <summary>
            App
            </summary>
        </member>
        <member name="M:SortAlgGame.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:SortAlgGame.App.Main">
            <summary>
            Application Entry Point.
            </summary>
        </member>
        <member name="T:SortAlgGame.Views.ResultV">
            <summary>
            Interaktionslogik für ResultV.xaml
            </summary>
            <summary>
            ResultV
            </summary>
        </member>
        <member name="M:SortAlgGame.Views.ResultV.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SortAlgGame.ViewModel.GameVM">
            <summary>
            Stellt die Daten fuer die Gui des Spiels zur Verfuegung. Sie Erbt von der Klasse NotifyChangeBase, 
            um der GUI Aenderungen mitteilen zu koennen.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.GameVM._sourceItemsP1">
            <summary>
            Auflistung der Daten fuer die Bausteinliste des Spielers 1.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.GameVM._targetItemsP1">
            <summary>
            Auflistung der Daten fuer die Algorithmus-Liste des Spielers 1.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.GameVM._sourceItemsP2">
            <summary>
            Auflistung der Daten fuer die Bausteinliste des Spielers 2.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.GameVM._targetItemsP2">
            <summary>
            Auflistung der Daten fuer die Algorithmus-Liste des Spielers 2.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.GameVM._game">
            <summary>
            Referenz auf ein Objekt der Model Klasse Game.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.GameVM._mainVM">
            <summary>
            Referenz auf die MainVM.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.GameVM._gameTimer">
            <summary>
            Timer fuer die bereits verstrichene Spielzeit.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.GameVM._loadingTimer">
            <summary>
            Timer fuer den Ladebildschirm.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.GameVM._p1Fin">
            <summary>
            Signalisiert, ob der Spieler 1 fertig ist.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.GameVM._p2Fin">
            <summary>
            Signalisiert, ob der Spieler 2 fertig ist.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.GameVM._p1Time">
            <summary>
            Zeit des Spieler 1.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.GameVM._p2Time">
            <summary>
            Zeit des Spieler 2.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.GameVM._waiting">
            <summary>
            Text des Wartebildschirms.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.GameVM._p1LoadingVisible">
            <summary>
            Sichtbarkeit des Spieler 1 Overlay.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.GameVM._p2LoadingVisible">
            <summary>
            Sichtbarkeit des Spieler 2 Overlay.
            </summary>
        </member>
        <member name="M:SortAlgGame.ViewModel.GameVM.#ctor(SortAlgGame.ViewModel.MainVM)">
            <summary>
            Konstruktor
            </summary>
            <param name="mainVM">Referenz auf das MainVM Objekt, dass mit der SurfaceWindow1 View verknuepft ist.</param>
        </member>
        <member name="M:SortAlgGame.ViewModel.GameVM.stopTimer">
            <summary>
            Stoppt den _gameTimer
            </summary>
        </member>
        <member name="M:SortAlgGame.ViewModel.GameVM.gameTimeEvent(System.Object,System.EventArgs)">
            <summary>
            Wird im festgelegten Interval des _gameTimer Objekts aufgerufen. Aktualisiert die Zeiten der Spieler.
            </summary>
            <param name="sender">Sender des Events</param>
            <param name="e">Event</param>
        </member>
        <member name="M:SortAlgGame.ViewModel.GameVM.loadingTimeEvent(System.Object,System.EventArgs)">
            <summary>
            Wird im Interval des _loadingTimer Objekts aufgerufen. Sorgt fuer eine geringe Verzoegerung der 
            Auswertung, damit der Ladebildschirm auch bei einer sehr schnellen Auswertung der Algorithmen kurz 
            zu sehen ist und nicht nur kurz aufblitzt.
            </summary>
            <param name="sender">Sender des Events</param>
            <param name="e">Event</param>
        </member>
        <member name="M:SortAlgGame.ViewModel.GameVM.gameFin(SortAlgGame.Model.Player)">
            <summary>
            Schaltet das Spieler Overlay sichtbar und startet, wenn beide Spieler fertig sind den Timer _loadingTimer 
            zur Darstellung des Ladebildschirms.
            </summary>
            <param name="player">Spieler der fertig ist</param>
        </member>
        <member name="M:SortAlgGame.ViewModel.GameVM.initSourceItems">
            <summary>
            Sorgt fuer das Initialisieren der Bausteinlisten.
            </summary>
        </member>
        <member name="M:SortAlgGame.ViewModel.GameVM.initPlayerWise(System.Collections.ObjectModel.ObservableCollection{SortAlgGame.Model.Statements.Statement},SortAlgGame.Model.Player)">
            <summary>
            Initialisiert die Bausteinliste des uebergebenen Spielers.
            </summary>
            <param name="list">Bausteinliste</param>
            <param name="player">Besitzer der Bausteinliste</param>
        </member>
        <member name="M:SortAlgGame.ViewModel.GameVM.initTargetItems">
            <summary>
            Initialisiert die Algorithmus-Listen der Spieler
            </summary>
        </member>
        <member name="M:SortAlgGame.ViewModel.GameVM.canDrop(System.Object,System.Object,System.String,System.String)">
            <summary>
            Ueberprueft ob ein Drop erlaubt ist.
            </summary>
            <param name="cursorData">Die Daten des Cursors</param>
            <param name="targetData">Daten des Ziels</param>
            <param name="sourceTag">Ursprungsort des Cursors</param>
            <param name="targetTag">Bezeichnung des Ziels</param>
            <returns>True, wenn ein Drop erlaubt ist. False, wenn nicht.</returns>
        </member>
        <member name="M:SortAlgGame.ViewModel.GameVM.dragableObject(System.Object)">
            <summary>
            Prueft ob die im Cursor enthaltenen Daten bewegt werden duerfen.
            </summary>
            <param name="cursorData">Daten des Cursors</param>
            <returns>True, wenn Drag erlaubt. False, wenn nicht.</returns>
        </member>
        <member name="M:SortAlgGame.ViewModel.GameVM.inSourceList(System.Object,System.Object)">
            <summary>
            Ueberprueft ob sich das gesuchte Statement in der Liste befindet.
            </summary>
            <param name="sourceList">Zu durchsuchende Liste</param>
            <param name="cursorData">Gesuchtes Statement</param>
            <returns></returns>
        </member>
        <member name="M:SortAlgGame.ViewModel.GameVM.updateTargetList(SortAlgGame.Model.Programm)">
            <summary>
            Aktualisiert die ObservableCollections _targetItemsP1 und _targetItemsP2 
            </summary>
            <param name="p">Das Programm, das aktualisiert wurde</param>
        </member>
        <member name="M:SortAlgGame.ViewModel.GameVM.addToTargetList(System.Object,System.Object,System.Collections.IEnumerable)">
            <summary>
            Fuegt an gewuenschter Position des Algorithmus den in CursorData enthaltenen Baustein hinzu, aktualisiert dann 
            die Algorithmus-Liste und entfernt den Baustein aus der Bausteinliste.
            </summary>
            <param name="cursorData">Cursor Daten in Form eines Statement</param>
            <param name="targetStm">Ziel des Drops</param>
            <param name="sourceList">Ursprung der Cursor Daten</param>
        </member>
        <member name="M:SortAlgGame.ViewModel.GameVM.addToSourceList(System.Object,System.Object)">
            <summary>
            Fuegt der Bausteinliste einen neuen Baustein hinzu.
            </summary>
            <param name="cursorData">Cursor Daten in form eines Statements</param>
            <param name="target">Ziel Objekt</param>
        </member>
        <member name="M:SortAlgGame.ViewModel.GameVM.sortStm(System.Object,System.Object)">
            <summary>
            Verschiebt das Statement des Cursors an die gewuenschtne Position im Algorithmus.
            </summary>
            <param name="cursorData">Cursor Daten in Form eines Statements</param>
            <param name="targetData">Neue Position des Statements</param>
        </member>
        <member name="P:SortAlgGame.ViewModel.GameVM.gameFin1">
            <summary>
            Befehl, der den Spieler 1 als fertig markiert.
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.GameVM.gameFin2">
            <summary>
            Befehl, der den Spieler 2 als fertig markiert.
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.GameVM.MainVM">
            <summary>
            _mainVM Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.GameVM.SourceItemsP1">
            <summary>
            _sourceItemsP1 Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.GameVM.TargetItemsP1">
            <summary>
            _targetItemsP1 Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.GameVM.SourceItemsP2">
            <summary>
            _sourceItemsP2 Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.GameVM.TargetItemsP2">
            <summary>
            _targetItemsP2 Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.GameVM.P1Time">
            <summary>
            _p1Time Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.GameVM.P2Time">
            <summary>
            _p2Time Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.GameVM.Waiting">
            <summary>
            _waiting Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.GameVM.P1LoadingVisible">
            <summary>
            _p1LoadingVisible Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.GameVM.P2LoadingVisible">
            <summary>
            _p2LoadingVisible Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.GameVM.Game">
            <summary>
            _game Accessor
            </summary>
        </member>
        <member name="T:SortAlgGame.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SortAlgGame.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SortAlgGame.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:SortAlgGame.SurfaceWindow1">
            <summary>
            Interaction logic for SurfaceWindow1.xaml
            </summary>
            <summary>
            SurfaceWindow1
            </summary>
        </member>
        <member name="M:SortAlgGame.SurfaceWindow1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:SortAlgGame.SurfaceWindow1.OnClosed(System.EventArgs)">
            <summary>
            Occurs when the window is about to close. 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SortAlgGame.SurfaceWindow1.AddWindowAvailabilityHandlers">
            <summary>
            Adds handlers for window availability events.
            </summary>
        </member>
        <member name="M:SortAlgGame.SurfaceWindow1.RemoveWindowAvailabilityHandlers">
            <summary>
            Removes handlers for window availability events.
            </summary>
        </member>
        <member name="M:SortAlgGame.SurfaceWindow1.OnWindowInteractive(System.Object,System.EventArgs)">
            <summary>
            This is called when the user can interact with the application's window.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SortAlgGame.SurfaceWindow1.OnWindowNoninteractive(System.Object,System.EventArgs)">
            <summary>
            This is called when the user can see but not interact with the application's window.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SortAlgGame.SurfaceWindow1.OnWindowUnavailable(System.Object,System.EventArgs)">
            <summary>
            This is called when the application's window is not visible or interactive.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SortAlgGame.SurfaceWindow1.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SortAlgGame.ViewModel.MainVM">
            <summary>
            Die Klasse MainVM ist an die SurfaceWindow1 View gebunden. In ihr befinden sich die Commands zum Navigieren durch 
            die Benutzersteuerelemente. Sie erbt von der Klasse NotifyChangeBase, um der GUI Aenderungen mitteilen zu koennen.
            </summary>
        </member>
        <member name="F:SortAlgGame.ViewModel.MainVM.currentView">
            <summary>
            Beinhaltet das Benutzersteuerelement, das in der SurfaceWindow1 View angezeigt werden soll.
            </summary>
        </member>
        <member name="M:SortAlgGame.ViewModel.MainVM.#ctor">
            <summary>
            Konstruktor
            </summary>
        </member>
        <member name="M:SortAlgGame.ViewModel.MainVM.toHauptmenue">
            <summary>
            Deaktiviert laufende Timer vor dem wechsel zum Hauptmenue.
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.MainVM.CurrentView">
            <summary>
            _currentView Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.MainVM.changeToHauptmenue">
            <summary>
            Befehl, um zum Hauptmenue zu navigieren.
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.MainVM.changeToGame">
            <summary>
            Befehl, um zum Spiel zu navigieren.
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.MainVM.changeToBubble">
            <summary>
            Befehl, um zur Bubblesort Erklaerung zu navigieren.
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.MainVM.changeToQuick">
            <summary>
            Befehl, um zur Quicksort Erklaerung zu navigieren.
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.MainVM.changeToSelection">
            <summary>
            Befehl, um zur Selectionsort Erklaerung zu navigieren.
            </summary>
        </member>
        <member name="P:SortAlgGame.ViewModel.MainVM.changeToInsertion">
            <summary>
            Befehl, um zur Insertionsort Erklaerung zu navigieren.
            </summary>
        </member>
        <member name="T:SortAlgGame.Model.Game">
            <summary>
            Die Game Klasse repraesentiert die Geschaeftslogik fuer das Spiel
            </summary>
        </member>
        <member name="F:SortAlgGame.Model.Game._winner">
            <summary>
            Referenz auf den Gewinner. Null wenn unentschieden.
            </summary>
        </member>
        <member name="F:SortAlgGame.Model.Game._arrayGen">
            <summary>
            ArrayGen Objekt. Zum Erstellen von Zahlenfolgen.
            </summary>
        </member>
        <member name="F:SortAlgGame.Model.Game._testArrays">
            <summary>
            Zahlenfolgen, auf die der Algorithmus angewandt werden soll.
            </summary>
        </member>
        <member name="F:SortAlgGame.Model.Game._fastestPlayer">
            <summary>
            Referenz auf den schnelleren Spieler. Null wenn beide gleich schnell sind.
            </summary>
        </member>
        <member name="F:SortAlgGame.Model.Game._p1">
            <summary>
            Referenz auf den Spieler 1
            </summary>
        </member>
        <member name="F:SortAlgGame.Model.Game._p2">
            <summary>
            Referenz auf dne Spieler 2
            </summary>
        </member>
        <member name="M:SortAlgGame.Model.Game.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:SortAlgGame.Model.Game.evaluate">
            <summary>
            Auswertung des Spiels.
            </summary>
        </member>
        <member name="M:SortAlgGame.Model.Game.updateProgrammStats">
            <summary>
            Speichert das Ergebnis des aktuellen Testfalls, der auf den Algorithmus angewandt wird.
            </summary>
        </member>
        <member name="P:SortAlgGame.Model.Game.Winner">
            <summary>
            _winner Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.Model.Game.FastestPlayer">
            <summary>
            _fastestPlayer Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.Model.Game.P1">
            <summary>
            _p1 Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.Model.Game.P2">
            <summary>
            _p2 Accessor
            </summary>
        </member>
        <member name="T:SortAlgGame.Model.Player">
            <summary>
            Die Klasse Player repraesentiert einen Spieler im Spiel der Applikation.
            </summary>
        </member>
        <member name="F:SortAlgGame.Model.Player._programm">
            <summary>
            Referenz auf das Programm des Spielers.
            </summary>
        </member>
        <member name="F:SortAlgGame.Model.Player._pointList">
            <summary>
            Liste von einem 5-Tuple. Beinhaltet die ausgewerteten Daten für alle Testfaelle: Laenge des Testarrays, Fehlerbericht, 
            Laufzeit, Sortierung, Punkte.
            </summary>
        </member>
        <member name="F:SortAlgGame.Model.Player._points">
            <summary>
            Gesamtpunktzahl des Spielers.
            </summary>
        </member>
        <member name="F:SortAlgGame.Model.Player._time">
            <summary>
            Vom spieler benoetigte Zeit zum zusammenbauen seines Algorithmus.
            </summary>
        </member>
        <member name="M:SortAlgGame.Model.Player.#ctor">
            <summary>
            Standard Konstruktor
            </summary>
        </member>
        <member name="M:SortAlgGame.Model.Player.addActStat(System.Boolean,System.Int32)">
            <summary>
            Fuegt ein neues 5-Tuple in die _pointList ein.
            </summary>
            <param name="sorted">Sortierung</param>
            <param name="roundPoint">In dem Testfall erreichte Punktzahl (0 oder 1)</param>
        </member>
        <member name="M:SortAlgGame.Model.Player.arraySorted">
            <summary>
            Kontrolliert ob die aktuelle Zahlenfolge in der Speicherverwaltung sortiert ist.
            </summary>
            <returns>True wenn sortiert. False wenn unsortiert.</returns>
        </member>
        <member name="M:SortAlgGame.Model.Player.runtimeAvailable">
            <summary>
            Kontrolliert ob eine Laufzeit ermittelt werden konnte.
            </summary>
            <returns>True, wenn Laufzeit ermittelt werden konnte. False, wenn nicht. </returns>
        </member>
        <member name="P:SortAlgGame.Model.Player.Programm">
            <summary>
            _programm Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.Model.Player.PointList">
            <summary>
            _pointList Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.Model.Player.Points">
            <summary>
            _points Accessor
            </summary>
        </member>
        <member name="P:SortAlgGame.Model.Player.Time">
            <summary>
            _time Accessor
            </summary>
        </member>
        <!-- Ungültiger XML-Kommentar wurde für den Member "T:SortAlgGame.Views.GameV" ignoriert -->
        <member name="M:SortAlgGame.Views.GameV.getFrameworkElement``1(System.Windows.FrameworkElement)">
            <summary>
            Sucht nach einem FrameworkElement im VisualTreeHelper
            </summary>
            <typeparam name="T">Type des gesuchten FrameworkElements</typeparam>
            <param name="source">Quelle</param>
            <returns></returns>
        </member>
        <member name="M:SortAlgGame.Views.GameV.dropable(Microsoft.Surface.Presentation.Controls.SurfaceListBoxItem,Microsoft.Surface.Presentation.Controls.SurfaceListBox,Microsoft.Surface.Presentation.Controls.SurfaceListBox,Microsoft.Surface.Presentation.SurfaceDragCursor)">
            <summary>
            Ruft die Methode canDrop(..) der GameVM auf und ermittelt so, ob ein Drop möglich ist.
            </summary>
            <param name="target">Drop Ziel SurfaceListBoxItem</param>
            <param name="targetList">SurfaceListBox in dem sich das Drop Ziel befindet</param>
            <param name="sourceList">SurfaceListBox aus der der Cursor stammt</param>
            <param name="cursor">Cursor</param>
            <returns></returns>
        </member>
        <member name="M:SortAlgGame.Views.GameV.OnTouchDown(System.Object,System.Windows.Input.TouchEventArgs)">
            <summary>
            Dieser Event Handler wird von den SurfaceListBox Elementen aufgerufen, wenn ein TouchDown Event ausgeloest wird. 
            Erstellt wenn moeglich einen Cursor. 
            </summary>
            <param name="sender">Sender des Events</param>
            <param name="e">Event</param>
        </member>
        <member name="M:SortAlgGame.Views.GameV.OnDragEnter(System.Object,Microsoft.Surface.Presentation.SurfaceDragDropEventArgs)">
            <summary>
            Dieser Event Handler wird immer dann aufgerufen, wenn der Cursor ueber ein Element gezogen wird, welches 
            ein DragEnterEvent ausloesen kann. Weist dem Cursor die erlaubten Effekte zu.
            </summary>
            <param name="sender">Sender des Events</param>
            <param name="e">Event</param>
        </member>
        <member name="M:SortAlgGame.Views.GameV.OnDragLeave(System.Object,Microsoft.Surface.Presentation.SurfaceDragDropEventArgs)">
            <summary>
            Dieser Event Handler wird immer dann aufgerufen, wenn der Cursor aus dem Bereich eines Elements herausgezogen 
            wird, das ein DragLeave Event ausloesen kann. Weist dem Cursor die erlaubten Effekte zu.
            </summary>
            <param name="sender">Sender des Events</param>
            <param name="e">Event</param>
        </member>
        <member name="M:SortAlgGame.Views.GameV.OnTargetChanged(System.Object,Microsoft.Surface.Presentation.TargetChangedEventArgs)">
            <summary>
            Dieser Event Handler wird immer dann aufgerufen, wenn sich das Ziel des Cursors aendert. Es aendert je nachdem 
            ob ein Drop möglich ist, die Darstellung des Cursors.
            </summary>
            <param name="sender">Sender des Events</param>
            <param name="e">Event</param>
        </member>
        <!-- Ungültiger XML-Kommentar wurde für den Member "M:SortAlgGame.Views.GameV.OnDrop(System.Object,Microsoft.Surface.Presentation.SurfaceDragDropEventArgs)" ignoriert -->
        <member name="M:SortAlgGame.Views.GameV.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SortAlgGame.Config">
            <summary>
            Konfigurationsdatei
            </summary>
        </member>
        <member name="F:SortAlgGame.Config.NOT_USED">
            <summary>
            Belegung einer Variable, die nicht verwendet wird.
            </summary>
        </member>
        <member name="F:SortAlgGame.Config.INDENT">
            <summary>
            Breite der Einrueckung des Pseudocodes
            </summary>
        </member>
        <member name="F:SortAlgGame.Config.ANIMATION_TIMER">
            <summary>
            Aktualisierungs Interval des Animation Timers in ms
            </summary>
        </member>
        <member name="F:SortAlgGame.Config.MAX_GAME_TIME">
            <summary>
            Begrenzung der Spielzeit Anzeige in Sekunden
            </summary>
        </member>
        <member name="F:SortAlgGame.Config.TEXT_NORMAL">
            <summary>
            Standard Schriftfarbe der Pseudocode Bausteine
            </summary>
        </member>
        <member name="F:SortAlgGame.Config.TEXT_RED">
            <summary>
            Schriftfarbe eines selektierten Pseudocode Bausteins
            </summary>
        </member>
        <member name="F:SortAlgGame.Config.RECT_MULTIPLIKATOR">
            <summary>
            Multiplikator der Rechteckhoehe im Balkendiagramm
            </summary>
        </member>
        <member name="F:SortAlgGame.Config.OUT_OF_RANGE_ERROR">
            <summary>
            Fehlermeldung bei einem Zugriff außerhalb des Arrays.
            </summary>
        </member>
        <member name="F:SortAlgGame.Config.NOT_INIT_ERROR">
            <summary>
            Fehlermeldung beim Zugriff auf eine nicht initialisierte Variable.
            </summary>
        </member>
        <member name="F:SortAlgGame.Config.RUNTIME_NA">
            <summary>
            Platzhalter, wenn die Laufzeit nicht bestimmt werden konnte.
            </summary>
        </member>
        <member name="F:SortAlgGame.Config.MAX_RUNTIME_ERROR">
            <summary>
            Fehlermeldung, wenn die maximal moegliche Laufzeit ueberschritten wurde.
            </summary>
        </member>
        <member name="F:SortAlgGame.Config.WAITING_Player">
            <summary>
            Konstante zum Bestimmen des Wartetextes im Spiel, wenn auf den anderen Spieler gewartet werden muss.
            </summary>
        </member>
        <member name="F:SortAlgGame.Config.WAITING_RESULT">
            <summary>
            Konstante zum Bestimmen des Wartetextes im Spiel, wenn auf die Auswertung gewartet werden muss.
            </summary>
        </member>
        <member name="F:SortAlgGame.Config.INFO_BUBBLE">
            <summary>
            Informationstext des Algorithmus Bubblesort.
            </summary>
        </member>
        <member name="F:SortAlgGame.Config.INFO_INSERTION">
            <summary>
            Informationstextdes Algorithmus Insertionsort
            </summary>
        </member>
        <member name="F:SortAlgGame.Config.INFO_SELECTION">
            <summary>
            Informationstext des Algorithmus Selectionsort
            </summary>
        </member>
        <member name="F:SortAlgGame.Config.INFO_QUICK">
            <summary>
            Informationstext des Algorithmus Quicksort
            </summary>
        </member>
        <member name="F:SortAlgGame.Config.RUNS">
            <summary>
            Laenge der zu erstellenden Testzahlfenfolgen bei der Auswertung eines Algorithmus.
            </summary>
        </member>
        <member name="M:SortAlgGame.Config.MAX_RUNTIME(System.Int32)">
            <summary>
            Methode zum Bestimmen der maximalen Laufzeit.
            </summary>
            <param name="n">Anzahl der zu sortierenden Elemente</param>
            <returns>Maximale Laufzeit</returns>
        </member>
        <member name="T:SortAlgGame.Config.EXECUTE">
            <summary>
            Enumerator zum Bestimmen der Bausteinart.
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
